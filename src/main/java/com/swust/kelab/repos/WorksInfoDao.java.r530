package com.swust.kelab.repos;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Repository;

import com.swust.kelab.domain.Author;
import com.swust.kelab.domain.Comment;
import com.swust.kelab.domain.WorkDetail;
import com.swust.kelab.domain.WorkUpdate;
import com.swust.kelab.domain.WorksInfo;
import com.swust.kelab.repos.bean.ListQuery;

@Repository(value = "worksInfoDao")
public class WorksInfoDao {
    @Resource
    private SqlSession sqlSession;
    @Resource
    HttpServletRequest request;
    
    
    //--ljf--
    public List<WorkUpdate> selectWorkUpdateByID(int workId) throws Exception{
    	return sqlSession.selectList("worksInfo.selectWorkUpdateByID",workId);
    }
    public String selectWorkUpdateByWebsiteId(int workId) throws Exception{
    	return sqlSession.selectOne("worksInfo.selectWorkUpdateByWebsiteId",workId);
    }
    
 
    //--至此--
    
    //--zd--
    public List<WorksInfo> selectWorkType(int ActionType) throws Exception {
        return sqlSession.selectList("worksInfo.selectWorkType", ActionType);
    }
    /*public List<WorksInfo> selectWorkTypeByNovelCount() throws Exception {
        return sqlSession.selectList("worksInfo.selectWorkTypeByNovelCount");
    }*/
    public List<WorkDetail> selectHotWork(int ActionType) throws Exception {
        return sqlSession.selectList("worksInfo.selectHotWork", ActionType);
    }
    /*public List<WorkDetail> selectHotWorkByComments() throws Exception {
        return sqlSession.selectList("worksInfo.selectHotWorkByComments");
    }
    public List<WorkDetail> selectHotWorkByRecom() throws Exception {
        return sqlSession.selectList("worksInfo.selectHotWorkByRecom");
    }*/
    public List<WorkDetail> selectNovelUpdateByTime() throws Exception {
        return sqlSession.selectList("worksInfo.selectNovelUpdateByTime");
    }
    
    //最大点击量
    public List<WorkDetail> selectMaxWorkHit() throws Exception {
        return sqlSession.selectList("worksInfo.selectMaxWorkHit");
    }
    //每个阶段点击量的作品数
    public List<WorkDetail> selectWorkHit(long maxBound, long minBound) throws Exception {
    	Map<String, Long> map = new HashMap<String, Long>();
    	map.put("maxBound", maxBound);
    	map.put("minBound", minBound);
        return sqlSession.selectList("worksInfo.selectWorkHit", map);
    }
    
    //最大评论数
    public List<WorkDetail> selectMaxWorkComment() throws Exception {
        return sqlSession.selectList("worksInfo.selectMaxWorkComment");
    }
    //每个阶段评论数的作品数
    public List<WorkDetail> selectWorkComment(long maxBound, long minBound) throws Exception {
    	Map<String, Long> map = new HashMap<String, Long>();
    	map.put("maxBound", maxBound);
    	map.put("minBound", minBound);
        return sqlSession.selectList("worksInfo.selectWorkComment", map);
    }
    
    //最大推荐数
    public List<WorkDetail> selectMaxWorkRecom() throws Exception {
        return sqlSession.selectList("worksInfo.selectMaxWorkRecom");
    }
    //每个阶段推荐数的作品数
    public List<WorkDetail> selectWorkRecom(long maxBound, long minBound) throws Exception {
    	Map<String, Long> map = new HashMap<String, Long>();
    	map.put("maxBound", maxBound);
    	map.put("minBound", minBound);
        return sqlSession.selectList("worksInfo.selectWorkRecom", map);
    }
    //--至此--
    
    public int selectCount(ListQuery query) throws Exception {
        return sqlSession.selectOne("worksInfo.selectCount", query);
    }

    public int insert(Author author) throws Exception {
        return sqlSession.insert("worksInfo.insert", author);
    }

    public int update(Author author) throws Exception {
        return sqlSession.update("worksInfo.update", author);
    }

    public int delete(int authorId) throws Exception {
        return sqlSession.delete("worksInfo.delete", authorId);
    }

    public List<WorksInfo> selectList(ListQuery query) throws Exception {
        return sqlSession.selectList("worksInfo.select", query);
    }

    public List<WorksInfo> selectTop(int ActionType) throws Exception {
        return sqlSession.selectList("worksInfo.selectTop", ActionType);
    }

    public List<WorksInfo> selectByAuthor(ListQuery query) throws Exception {
        return sqlSession.selectList("worksInfo.selectByAuthor", query);
    }

    public int countWorks() throws Exception {
        return sqlSession.selectOne("worksInfo.countWorks");
    }

    public WorksInfo selectById(ListQuery query) throws Exception {
        return sqlSession.selectOne("worksInfo.select", query);
    }

    public List<WorkDetail> selectByWork(ListQuery query) throws Exception {
        return sqlSession.selectList("worksInfo.selectByWork", query);
    }

    public List<Comment> commentsByWork(ListQuery query) throws Exception {
        return sqlSession.selectList("worksInfo.commentsByWork", query);
    }
}
